#!/usr/bin/perl 

#use utf8;
use open ':std', ':encoding(UTF-8)';
use 5.010;

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";

use Pod::Usage;
use Getopt::Mixed;
use Text::Dapper;

my $PORT = 8000;

my( $COMMAND, $SOURCE,   $OUTPUT,   $LAYOUT,   $CONFIG,       $HELP, $VERSION ) =
  ( undef,    "_source", "_output", "_layout", "_config.yml", undef, undef );

=head1 USAGE

=over 5

=item dapper -h          # Help

=item dapper -v          # Version

=item dapper -s <dir>    # Source dir name (default: _source)

=item dapper -o <dir>    # Output dir name (default: _output)

=item dapper -l <dir>    # Layout dir name (default: _layout)

=item dapper -c <config> # Config file name (default: _project.cfg)

=item dapper init        # Create new skeleton project

=item dapper build       # Build site

=item dapper serve       # Serve locally

=back
=cut

sub init {
    my $d = new Text::Dapper($SOURCE, $OUTPUT, $LAYOUT, $CONFIG);
    $d->init();
    #Text::Dapper::init();
}

sub build {
    my $d = new Text::Dapper($SOURCE, $OUTPUT, $LAYOUT, $CONFIG);
    $d->build();
    #Text::Dapper::build();
}

sub serve {
    my $d = new Text::Dapper($SOURCE, $OUTPUT, $LAYOUT, $CONFIG);
    $d->serve($PORT);
    #Text::Dapper::serve($PORT);
}

sub help() {
    pod2usage({-sections => [ qw(USAGE) ] });
    exit(0);
}

sub version() {
    print "Dapper version $Text::Dapper::VERSION\n";
    exit(0);
}

Getopt::Mixed::init(
    q{h
    v   version>v
    s=s source>s
    o=s output>o
    l=s layout>l
    c=s config>c
});

while( my( $option, $value, $pretty ) = Getopt::Mixed::nextOption() ) {
    $SOURCE = $value if $option eq 's';
    $OUTPUT = $value if $option eq 'o';
    $LAYOUT = $value if $option eq 'l';
    $CONFIG = $value if $option eq 'c';
    help()           if $option eq 'h';
    version()        if $option eq 'v';
}

Getopt::Mixed::cleanup();

$COMMAND = $ARGV[0];
$COMMAND = "help" if not $COMMAND;

my $switch = {
  'init'    => sub { init() },
  'build'   => sub { build() },
  'serve'   => sub { serve() },
  'default' => sub { help(); }
};
$switch->{$COMMAND} ? $switch->{$COMMAND}->() : $switch->{'default'}->();

#return 1 if caller;
#exit run(@ARGV);
1;

